import { d as defineCommand, b as dotEnvArgs, e as legacyRootDirArgs, f as envNameArgs, l as logLevelArgs, c as cwdArgs } from '../shared/nuxi.D5U3oSa9.mjs';
import buildCommand from './build.mjs';
import 'node:path';
import 'node:process';
import 'node:util';
import 'node:tty';
import 'node:url';
import '../shared/nuxi.LmkKHh9o.mjs';
import '../shared/nuxi.Bu_55mY6.mjs';
import 'node:fs';
import 'node:module';
import '../shared/nuxi.D4vggcPe.mjs';
import 'node:assert';
import 'node:v8';
import '../shared/nuxi.Do0aYBCO.mjs';
import '../shared/nuxi.CdLKTWzs.mjs';
import '../shared/nuxi.BxQQOHdn.mjs';
import '../shared/nuxi.E-ZsRS8r.mjs';
import 'node:os';
import 'node:crypto';
import 'node:perf_hooks';
import 'node:vm';
import 'assert';
import 'fs';
import 'module';
import 'os';
import 'path';
import 'process';
import 'tty';
import 'url';
import 'util';
import 'v8';
import '../shared/nuxi.BSP3l5sz.mjs';
import '../shared/nuxi.JWBOk7pn.mjs';

const generate = defineCommand({
  meta: {
    name: "generate",
    description: "Build Nuxt and prerender all routes"
  },
  args: {
    ...cwdArgs,
    ...logLevelArgs,
    ...envNameArgs,
    ...legacyRootDirArgs,
    ...dotEnvArgs
  },
  async run(ctx) {
    ctx.args.prerender = true;
    await buildCommand.run(
      // @ts-expect-error types do not match
      ctx
    );
  }
});

export { generate as default };
